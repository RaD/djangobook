<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
[
<!ENTITY BASEID "djangobook.chap06">
]>

<chapter lang="ru" id="&BASEID;">

  <title id="&BASEID;.title">
    Интерфейс администратора  Django
  </title>

  <para>
    Данная глава временно взята из первой версии книги и подлежит
    корректировке. Вы можете помочь с этим!
  </para>

  <para>
    Перевод &copy; Попов Руслан &lt;radz &bull; yandex &bull; ru&gt;
  </para>

  <para>
    Автоматический <emphasis>интерфейс администратора</emphasis>
    является значимым компонентом Django. Получая метаданные из ваших
    моделей, он предоставляет мощный интерфейс промышленного уровня,
    который может быть немедленно использован для наполнения сайта
    информацией. В данной главе, мы рассмотрим как активировать,
    использовать и настраивать интерфейс администратора.

    <note>
      <title>
	Следует отметить...
      </title>

      <para>
	Интерфейс администратора был значительно переработан со
	времени Django версии 0.96. Данная глава описывает новейшую
	версию интерфейса, которая предоставляет широкие возможности
	по настройке. Если вы следили за разработкой Django, вы могли
	слышать об этой версии, она называлась
	<quote>newforms-admin</quote>.
      </para>
    </note>
  </para>

  <section id="&BASEID;.activate">

    <title id="&BASEID;.activate.title">
      Активация интерфейса администратора
    </title>

    <para>
      Рассмотрим активацию интерфейса администратора Django на примере
      сайта, который вы сейчас читаете или с которого была скачана
      офлайн копия данного документа. Необходимо подключить к
      интерфейсу две модели: <classname>News</classname>, которая
      описывает новости, и <classname>Claims</classname>, которая
      описывает жалобы пользователей:
      <orderedlist>
	<listitem>
	  <para>
	    Добавим <token>django.contrib.admin</token> к параметру
	    <varname>INSTALLED_APPS</varname> в файле конфигурации
	    проекта.
	    <screen>
	      <![CDATA[
INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    # интерфейс администратора и документация
    'django.contrib.admin',
    'django.contrib.admindocs',
    'djangobook', # наш проект
    'djangobook.book', # приложение проекта, с моделями
)
	      ]]>
	    </screen>
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Создать в каталоге приложения
	    <application>book</application> файл
	    <filename>admin.py</filename> для привязки каждой модели к
	    интерфейсу администратора. Для привязки модели необходимо
	    создать класс от <classname>ModelAdmin</classname>, для
	    удобства имя для класса получается путём соединения имени
	    модели и слова <quote>Admin</quote>. Класс описывает
	    формат отображения модели на странице интерфейса
	    администратора. Содержимое моего файла
	    <filename>admin.py</filename>:
	    <screen>
	      <![CDATA[
# -*- coding: utf-8 -*-

from django.contrib import admin
from djangobook.book.models import News, Claims

class NewsAdmin(admin.ModelAdmin):
    fieldsets = (
        (None,{'fields': ('title', 'datetime')}),
        ('Содержимое', {'fields': ('text',)}))
    list_display = ('title', 'datetime')
    ordered = ('-datetime')
admin.site.register(News, NewsAdmin)

class ClaimsAdmin(admin.ModelAdmin):
    fieldsets = (
        ('Мета', {'fields': ('datetime', 'url')}),
        ('Ошибка', {'fields': ('ctx_left', 'selected', 'ctx_right')}),
        ('Комментарий', {'fields': ('email','comment')}))
    list_display = ('email', 'comment', 'url', 'datetime')
    ordered = ('-datetime')
admin.site.register(Claims, ClaimsAdmin)
	      ]]>
	    </screen>
	    Как видно из кода, свойство <token>fieldsets</token>
	    описывает наборы полей, свойство
	    <token>list_display</token> описывает как будут
	    отображаться данные моделей в виде списка, а свойство
	    <token>ordered</token> определяет сортировку этого списка.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Привязать функциональность административного интерфейса к
	    проекту:
	    <screen>
	      <![CDATA[
# -*- coding: utf-8 -*-

from django.conf.urls.defaults import *
from django.contrib import admin

#автоматическое подключение необходимых приложений
admin.autodiscover()

urlpatterns = patterns('',
    # Интерфейс администратора
    (r'^admin/(.*)', admin.site.root),
    # Документация на интерфейсе администратора
    (r'^admin/doc/', include('django.contrib.admindocs.urls')),
)
	      ]]>
	    </screen>
	  </para>
	</listitem>
      </orderedlist>
    </para>

    <para>
      Не забудьте выполнить команду <command>python manage.py
      syncdb</command>. Она установит дополнительные таблицы в базу
      данных, которые будет использовать интерфейс администратора.
      
      <note>
	<para>
	  При первом запуске <command>syncdb</command> при наличии
	  <token>django.contrib.auth</token> в
	  <varname>INSTALLED_APPS</varname>, у вас спросят о
	  необходимости создания суперпользователя. Если вы его не
	  создадите, то позже для его создания вам потребуется
	  выполнить
	  <filename>django/contrib/auth/create_superuser.py</filename>. В
	  противном случае вы не сможете войти в интерфейс
	  администратора.
	</para>
      </note>
    </para>

    <para>
      Вот так. Теперь запустим <command>python manage.py
      runserver</command> для старта сервера разработки. Вы увидите
      нечто подобное:
      <screen>
Validating models...
0 errors found.

Django version 1.1 pre-alpha SVN-9212, using settings 'djangobook.settings'
Development server is running at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
      </screen>
    </para>

    <para>
      Теперь можно перейти на URL <ulink
      url="http://127.0.0.1:8000/admin/"/>, войти в интерфейс и
      поиграться.
    </para>

  </section>

  <section id="&BASEID;.use">

    <title id="&BASEID;.use.title">
      Использование интерфейса администратора
    </title>

    <para>
      Интерфейс администратора предназначен для использования
      неквалифицированными пользователями и, следовательно, он должен
      быть самодостаточным. Тем не менее, сделаем несколько замечаний
      по свойствам интерфейса.
    </para>

    <para>
      Первым, что вы увидите, будет экран ввода логина и пароля.
    </para>

    <para>
      <figure id="&BASEID;.pic1" float="0">
	<title id="&BASEID;.pic1.title">
	  Экран для ввода логина и пароля
	</title>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="pics/login.png" format="PNG"/>
	    </imageobject>
	  </mediaobject>
	</screenshot>
      </figure>
    </para>

    <para>
      Следует использовать логин и пароль, которые вы указали при
      выполнении команды <command>superuser</command>. После входа в
      интерфейс администратора, вы увидите, что можете управлять
      пользователями, группами и правами (подробности далее).
    </para>

    <para>
      Каждый объект, для которого унаследован объект от класса
      <classname>ModelAdmin</classname> и соответственно
      зарегистрирован в интерфейсе администратора, отображается на
      главной странице.
    </para>

    <para>
      <figure id="&BASEID;.pic2" float="0">
	<title id="&BASEID;.pic2.title">
	  Главная страница интерфейса администратора
	</title>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="pics/admin_index.png" format="PNG"/>
	    </imageobject>
	  </mediaobject>
	</screenshot>
      </figure>
    </para>

    <para>
      Ссылки <quote>add</quote> (добавить) и <quote>change</quote>
      (изменить) ведут на две страницы, которые мы называем как
      <emphasis>форма добавления объекта</emphasis> и <emphasis>список
      объектов для изменения</emphasis>. По существу, список изменений
      является индексной страницей объектов системы.
    </para>

    <para>
      <figure id="&BASEID;.pic3" float="0">
	<title id="&BASEID;.pic3.title">
	  Стандартный вид списка изменений
	</title>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="pics/changelist.png" format="PNG"/>
	    </imageobject>
	  </mediaobject>
	</screenshot>
      </figure>
    </para>

    <para>
      Ряд параметров управляет отображением полей на этих списках и
      присутствием дополнительных возможностей, таких как календарь,
      поля поиска, фильтры. Мы расскажем об этом далее.
    </para>

    <para>
      Формы редактирования используются для модификации существующих
      объектов и создания новых. Каждое поле, определённое в вашей
      модели, отобразится на форме и вы увидите, что для полей
      различных типов будут созданы различные элементы управления
      (т.е., поля даты/времени будут управляться через календарь,
      внешние ключи будут использовать выпадающие списки и так далее).
    </para>

    <para>
      <figure id="&BASEID;.pic4" float="0">
	<title id="&BASEID;.pic4.title">
	  Стандартная форма редактирования
	</title>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="pics/editform.png" format="PNG"/>
	    </imageobject>
	  </mediaobject>
	</screenshot>
      </figure>
    </para>

    <para>
      Вы увидите, что интерфейс администратора выполняет проверку
      пользовательского ввода. Попробуйте оставить пустыми поля,
      которые требуется заполнять, или введите неверное время в поле
      времени и вы увидите соответствующие сообщения об ошибках при
      попытке сохранить форму.
    </para>

    <para>
      <figure id="&BASEID;.pic5" float="0">
	<title id="&BASEID;.pic5.title">
	  Форма редактирования с ошибками
	</title>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="pics/editform_errors.png" format="PNG"/>
	    </imageobject>
	  </mediaobject>
	</screenshot>
      </figure>
    </para>

    <para>
      При редактировании существующего объекта обратите внимание на
      кнопку <guibutton>History</guibutton> (История) в верхнем правом
      углу окна. Каждое изменени произведённое через интерфейс
      администратора сохраняется в журнале. Доступ к журналу изменений
      производится нажатием на кнопку <guibutton>History</guibutton>.
    </para>

    <para>
      <figure id="&BASEID;.pic6" float="0">
	<title id="&BASEID;.pic6.title">
	  Страница изменений объекта
	</title>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="pics/history.png" format="PNG"/>
	    </imageobject>
	  </mediaobject>
	</screenshot>
      </figure>
    </para>

    <para>
      При удалении существующего объекта интерфейс администратора
      запрашивает у вас подтверждение операции для защиты от
      ошибочного удаления. Удаление <emphasis>каскадно</emphasis>,
      страница подтверждения операции удаления отображает все объекты,
      обрабатываемые в результате операции.
    </para>

    <para>
      <figure id="&BASEID;.pic7" float="0">
	<title id="&BASEID;.pic7.title">
	  Страница подтверждения операции удаления
	</title>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="pics/delete_confirm.png" format="PNG"/>
	    </imageobject>
	  </mediaobject>
	</screenshot>
      </figure>
    </para>

    <section id="&BASEID;.use.ugp">
      
      <title id="&BASEID;.use.ugp.title">
	Пользователи, группы и права
      </title>

      <para>
	После входа в интерфейс администратора в качестве
	суперпользователя, вы получили доступ к созданию, изменению и
	удалению любого объекта. Тем не менее, интерфейс
	администратора обладает системой управления пользовательским
	доступом. Вы можете использовать эту систему для
	предоставления доступа другим пользователям только к
	определённой части интерфейса, которая им нужна.
      </para>

      <para>
	Вы управляете этими пользователями и правами через интерфейс
	администратора, аналогично управлению любым другим
	объектом. Ссылка к моделям <token>User</token> (Пользователь)
	и <token>Group</token> (Группа) находится на главной странице
	среди всех объектов, определённых вами.
      </para>

      <para>
	Пользовательские объекты имеют стандартные поля: логин,
	пароль, электронная почта и имя пользователя, наряду с набором
	полей, которые определяют, что разрешено делать пользователю
	через интерфейс администратора. Существует набор из трёх
	флагов:
	<itemizedlist>
	  <listitem>
	    <para>
	      Флаг <quote>is active</quote> (активен) управляет
	      активностью пользователя в общем смысле. Если флаг
	      отключен, пользователь не имеет доступа к любому URL,
	      которые требует аутентификации.
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      Флаг <quote>is staff</quote> (сотрудник) управляет
	      доступом пользователя к интерфейсу администратора
	      (т.е. является ли пользователь штатным сотрудником вашей
	      организации). Так как, тот же самый пользователь системы
	      может управлять доступом к публичной, не
	      административной, части сайтов (обратитесь к главе
	      <quote><xref linkend="djangobook.chap12"
	      endterm="djangobook.chap12.title"/></quote>), значение
	      этого флага для публичных пользователей отличается от
	      значения для администраторов.
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      Флаг <quote>is superuser</quote> (суперпользователь)
	      предоставляет пользователю полный беспрепятственный
	      доступ к любому элементу интерфейса
	      администратора. Обычные правила доступа игнорируются.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>

      <para>
	Менеджеры, т.е. администраторы сайта с ограниченными правами,
	имеют доступ, который зависит от назначенных им прав. Каждый,
	редактируемый через интерфейс администратора, объект имеет три
	права: право <emphasis>создания</emphasis>, право
	<emphasis>редактировани</emphasis> и право
	<emphasis>удаления</emphasis>. Назначение прав пользователю
	предоставляет ему возможность выполнять назначенные действия.

	<note>
	  <para>
	    Доступ к редактированию пользователей и прав также
	    управляется системой прав. Если вы разрешили кому-нибудь
	    редактировать пользователей, то он сможет изменять свои
	    собственные права, а это может выходить за рамки того, что
	    вы желали!
	  </para>
	</note>
      </para>

      <para>
	Также вы можете объединять пользователей в
	группы. <emphasis>Группой</emphasis> является набор прав,
	которые назначаются для всех членов группы. Группы полезны при
	назначении одинаковых прав на большое количество
	пользователей.
      </para>

    </section>

  </section>

  <section id="&BASEID;.customize">

    <title id="&BASEID;.customize.title">
       Настройка интерфейса администратора
    </title>

    <para>
      Вы можете настраивать вид интерфейса администратора и его
      поведение рядом способов. Мы расскажем о некоторых из них в этой
      главе, так как они относятся к нашей модели
      <token>Book</token>. В главе <quote><xref
      linkend="djangobook.chap17"
      endterm="djangobook.chap17.title"/></quote> подробно
      рассматриваются вопросы настройки интерфейса администратора.
    </para>

    <para>
      В его нынешнем виде, список изменений для наших книг показывает
      только представление строк модели, которые мы добавили в её
      <token>__unicode__</token>. Это отлично работает для нескольких
      книг, но если у нас сотни или тысячи книг, будет очень трудно
      найти иголку в стоге сена. Тем не менее, мы легко можем добавить
      функции отображения, поиска и фильтрации к этому интерфейсу. В
      файле <filename>admin.py</filename> требуется создать класс для
      определения формата отображения модели <token>Book</token> на
      интерфейсе администратора:
      <screen>
# models.py
class Book(models.Model):
    title = models.CharField(max_length=100)
    authors = models.ManyToManyField(Author)
    publisher = models.ForeignKey(Publisher)
    publication_date = models.DateField()

    def __unicode__(self):
        return self.title

# admin.py
# -*- coding: utf-8 -*-

from django.contrib import admin
from book.models import Book

class BookAdmin(admin.ModelAdmin):
    list_display = ('title', 'publisher', 'publication_date')
    fieldsets = (('Основное',{'fields': ('publisher', 'publication_date')}),)
    ordering = ('-publication_date',)

admin.site.register(Book, BookAdmin)
      </screen>
    </para>

    <para>
      <figure id="&BASEID;.pic8" float="0">
	<title id="&BASEID;.pic8.title">
	  Изменённая страница редактирования списка
	</title>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="pics/changelist2.png" format="PNG"/>
	    </imageobject>
	  </mediaobject>
	</screenshot>
      </figure>
    </para>

    <para>
      Каждая из этих строк указывает интерфейсу администратора создать
      различные части этого интерфейса:
      <itemizedlist>
	<listitem>
	  <para>
	    Параметр <token>list_display</token> определяет какие
	    столбцы должны появиться в таблице списка изменений. По
	    умолчанию, список изменений имеет единственный столбец,
	    который содержит строковое представление объекта. В нашем
	    случае, мы указали, что надо отображать заголовок,
	    издателя и дату публикации.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Параметр <token>list_filter</token> создаёт панель
	    фильтрации на правой стороне списка. Мы позволяем
	    фильтрацию по дате (которая даёт нам возможность искать
	    книги выпущенные на прошлой неделе или в прошлом месяце и
	    так далее) и по издателю.
	  </para>

	  <para>
	    Можно указать интерфейсу администратора, что надо
	    фильтровать по любому полю, но внешние ссылки, даты,
	    булевы значения и поля с атрибутом <token>choice</token>
	    работают лучше. Фильтры отображаются до тех пор, пока
	    существует как минимум два значения из которых можно
	    выбрать.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Параметр <token>ordering</token> управляет порядком
	    отображения объектов на интерфейсе администратора. Он
	    определяет простой список полей, по которым надо
	    сортировать результат. Если перед именем поля поставить
	    минус, это обратит порядок сортировки для этого поля. В
	    данном примере, мы производим сортировку по дате
	    публикации, получая новые книги первыми.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Наконец, параметр <token>search_fields</token> создаёт
	    поле, которое позволяет выполнять поиск по тексту. Он
	    позволяет производить поиск по полю <token>title</token>
	    (т.е., вы можете набрать <emphasis>Django</emphasis> для
	    получения списка книг со словом <quote>Django</quote> в
	    заголовке).
	  </para>
	</listitem>
      </itemizedlist>
    </para>

    <para>
      Используя эти параметры (и другие, которые описаны в главе
      <quote><xref linkend="djangobook.chap12"
      endterm="djangobook.chap12.title"/></quote>) вы можете с помощью
      нескольких строк кода создать очень мощный, готовый к
      использованию интерфейс для управления данными.
    </para>

  </section>

  <section id="&BASEID;.customize.look">

    <title id="&BASEID;.customize.look.title">
      Настройка вида интерфейса администратора
    </title>

    <para>
      Очевидно, что фраза <quote>Django administration</quote> наверху
      каждой страницы интерфейса администратора будет смотреться
      несерьёзно. Это просто шаблон.
    </para>

    <para>
      Его легко изменить с помощью шаблонной системы Django. Сайт
      администратора Django работает под управлением Django и его
      интерфейсы используют собственную шаблонную систему Django.
    </para>

    <para>
      Как мы объясняли в главе <quote><xref
      linkend="djangobook.chap04"
      endterm="djangobook.chap04.title"/></quote>, параметр
      <token>TEMPLATE_DIRS</token> определяет список каталогов,
      которые следует проверять при загрузке шаблона. Для изменения
      вида интерфейса администратора, просто скопируйте
      соответствующий шаблон интерфейса из стандартного места в ваш
      каталог, который указан в параметре
      <token>TEMPLATE_DIRS</token>.
    </para>

    <para>
      Административный сайт находит заголовок <quote>Django
      administration</quote> с помощью просмотра файла
      <filename>admin/base_site.html</filename>. По умолчанию, этот
      шаблон расположен в каталоге шаблонов интерфейса администратора,
      <filename>django/contrib/admin/templates</filename>, который вы
      можете найти, посмотрев в каталог Python
      (<token>site-packages</token>). Для внесения изменений в
      <filename>base_site.html</filename>, скопируйте этот шаблон в
      подкаталог <filename>admin</filename> или в другой каталог,
      указанный в <token>TEMPLATE_DIRS</token>.
    </para>

    <para>
      Затем отредактируйте шаблон
      <filename>admin/base_site.html</filename> для замены
      оригинального текста на необходимый вам.
    </para>

    <para>
      Следует отметить, что любой из стандартных шаблонов интерфейса
      администратора может быть переопределён. Для переопределения
      шаблона просто сделайте с ним то, что сделали с
      <filename>base_site.html</filename>: скопируйте его из
      стандартного каталога в ваш и внесите изменения в эту копию.
    </para>

    <para>
      Вы можете спросить, как так происходит, что при пустом
      <token>TEMPLATE_DIRS</token> Django находит стандартные шаблоны
      для интерфейса. Дело в том, что по умолчанию, Django всегда ищет
      подкаталог <filename>templates</filename> в каталоге каждого
      приложения, если поиск по <token>TEMPLATE_DIRS</token> не
      удался. Обратитесь к разделу <quote><xref
      linkend="djangobook.chap10.template-loader"
      endterm="djangobook.chap10.template-loader.title"/></quote>
      главы <quote><xref linkend="djangobook.chap10"
      endterm="djangobook.chap10.title"/></quote> для информации о том
      как это всё работает.
    </para>

  </section>

  <section id="&BASEID;.customize.index">

    <title id="&BASEID;.customize.index.title">
      Настройка главной страницы интерфейса администратора
    </title>

    <para>
      Аналогично предыдущему разделу, вы можете пожелать настроить под
      себя главную страницу интерфейса администратора. По умолчанию,
      она отображает все доступные приложения в соответствии с
      параметром <token>INSTALLED_APPS</token>, отсортированные по
      имени приложения. Вы можете изменить порядок сортировки. Главная
      страница обычно является самой важной страницей интерфейса
      администратора, так что она должна быть проста в использовании.
    </para>

    <para>
      Изменять надо шаблон <filename>admin/index.html</filename>. (Не
      забудьте сначала скопировать его в свой каталог.) При
      редактировании файла вы увидите тег <token>{% get_admin_app_list
      as app_list %}</token>. Этот тег получает список установленных
      приложений. Вместо использования этого тега, вы можете жёстко
      указать ссылки на нужные страницы, так как это необходимо
      вам. Если прописывать руками ссылки не то, что вы желаете, то
      обратитесь к главе <quote><xref linkend="djangobook.chap10"
      endterm="djangobook.chap10.title"/></quote> для получения
      информации по созданию своего собственного тега.
    </para>

    <para>
      Django может вам помочь в настройке главной страницы. Выполните
      команду <command>python manage.py adminindex
      ПРИЛОЖЕНИЕ</command> для получения куска кода для шаблона,
      который можно включить в шаблон главной страницы. Это полезная
      точка начала работы над измененем страницы.
    </para>

    <para>
      Для получения полной информации по настройке административного
      сайта Django обратитесь к главе <quote><xref
      linkend="djangobook.chap17"
      endterm="djangobook.chap17.title"/></quote>.
    </para>

  </section>

  <section id="&BASEID;.when-why">

    <title id="&BASEID;.when-why.title">
      Когда и почему надо использовать интерфейс администратора
    </title>

    <para>
      Мы считаем, что интерфейс администратора, предоставляемый
      Django, достаточно эффектен. По сути, мы называем его одним из
      <quote>главных свойств</quote> Django. Тем не менее, нас
      часто спрашивают о <quote>вариантах использования</quote>
      интерфейса администратора &mdash; когда <emphasis>мы</emphasis>
      используем его и <emphasis>почему</emphasis>? По прошествии лет,
      мы обнаружили ряд вариантов использования интерфейса
      администратора, которые, как нам кажется, могут быть полезными.
    </para>

    <para>
      Очевидно, интерфейс администратора чрезвычайно полезен для
      редактирования данных. Если перед вами стоят любые задачи по
      вводу данных, интерфейс администратора на своём месте. Мы
      ожидаем, что огромная часть читателей этой книги столкнутся с
      такой задачей.
    </para>

    <para>
      Интерфейс администратора Django особенно полезен в ситуации,
      когда его использует неискушённый пользователь для ввода данных,
      что является основной задачей этого компонента системы. В
      редакции газеты, где Django был разработан, взаимодействие
      журналиста и разработчика при выдаче, например, специального
      репортажа о качестве воды в муниципальной сети, происходит
      как-то так:
      <itemizedlist>
	<listitem>
	  <para>
	    Журналист, ответственный за репортаж, встречается с одним
	    из разработчиков и обсуждает возможность публикации
	    имеющихся у него данных.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Разработчик создаёт модель для этих данных и затем
	    открывает доступ репортёру к интерфейсу администратора.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Пока журналист вводит данные в Django, разработчик может
	    сфокусироваться на работе над публичной частью интерфейса
	    (прикольная часть!).
	  </para>
	</listitem>
      </itemizedlist>
    </para>

    <para>
      Другими словами, смысл существования (raison d'être) интерфейса
      администратора Django &mdash; способствовать одновременной
      работе журналиста (наполнение сайта) и разработчика (создание
      функционала).
    </para>

    <para>
      Тем не менее, кроме очевидных задач по вводу данных, мы находим
      интерфейс администратора полезным в некоторых других случаях:
      <itemizedlist>
	<listitem>
	  <para>
	    <emphasis>Проверка моделей данных</emphasis>: Первое, что
	    мы должны сделать после создания новой модели &mdash;
	    вызвать её в интерфейсе администратора и ввести
	    какие-нибудь данные. Обычно на этом этапе находятся любые
	    ошибки моделирования. Наличие графического интерфейса к
	    модели помогает быстро обнаруживать проблемы.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    <emphasis>Рациональное использование полученных
	    данных</emphasis>: Для сайта подобного <ulink
	    url="http://chicagocrime.org/"/> требуется вводить немного
	    данных, так как большая часть информации поступает из
	    автоматического источника. Однако, при возникновении
	    проблем с автоматическим получением данных, полезно иметь
	    возможность легко добавлять и редактировать эти данные.
	  </para>
	</listitem>
      </itemizedlist>
    </para>

  </section>

</chapter>
