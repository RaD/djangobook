<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
[
<!ENTITY BASEID "djangobook.chap01">
]>

<chapter lang="ru" id="&BASEID;">

  <title id="&BASEID;.title">
    Введение в Django
  </title>

  <para>
    Перевод &copy; Попов Руслан &lt;ruslan.popov &bull; gmail&gt;
  </para>

  <para>
    Данная книга посвящена Django, среде<footnote><para>Здесь и далее
    слово <token>Django</token> будет рассматриваться как слово
    женского рода, от <quote>среда</quote>.</para></footnote>
    WEB<footnote><para>Здесь и далее речь будет идти о приложениях для
    Интернет, т.е., о сайтах.</para></footnote> разработки, которая
    позволяет сэкономить время и превращает работу в
    развлечение. Используя Django, вы можете с минимальными усилиями
    создавать и обслуживать высококачественные приложения.
  </para>

  <para>
    Разработка любого приложения &mdash; это многогранный процесс. Со
    своей лучшей стороны &mdash; это творческая работа, а с худшей
    &mdash; это нудное написание кода. Django позволяет
    сфокусироваться на творческой части разработки, облегчая её нудную
    часть. Для этого разработчику предоставляются высокоуровневые
    шаблоны, готовые решения для стандартных задач и явные соглашения
    о том как надо решать проблемы. В то же время Django старается не
    вмешиваться в ваш процесс разработки, позволяя вам выполнять
    необходимую работу вне своей среды.
  </para>

  <para>
    Цель данной книги &mdash; сделать вас экспертом по Django. Книга
    сфокусирована на двух вещах. Первое, мы подробно объясним, как
    работает Django и как создавать приложения с её помощью. Второе,
    там где это необходимо, мы обсудим высокоуровневую концепцию,
    отвечая на вопрос <quote>Как я могу эффективно применять эти
    инструменты в своих проектах?</quote> Читая эту книгу, вы получите
    навыки необходимые для разработки мощных приложений с простым
    поддерживаемым кодом.
  </para>

  <section id="&BASEID;.whatis">

    <title id="&BASEID;.whatis.title">
      Что такое среда разработки?
    </title>

    <para>
      Django является видным представителем нового поколения
      <emphasis>сред разработки</emphasis>, но что же конкретно
      подразумевают под этим термином?
    </para>

    <para>
      Для того, чтобы ответить на этот вопрос давайте рассмотрим
      дизайн приложения написанного на языке Python <emphasis>без
      использования среды разработки</emphasis>. На протяжении всей
      книги мы будем использовать данный подход, чтобы показать вам
      основные способы выполнить работу <emphasis>без</emphasis>
      вспомогательных средств, в надежде, что вы разберётесь почему
      эти средства так полезны. Также важно знать как можно решить
      задачу на низком уровне, так как высокий уровень
      (вспомогательные средства) не всегда доступен. И очень важно то,
      что знание <emphasis>почему</emphasis> что-то работает именно
      так, а не иначе, делает вас опытнее.
    </para>

    <para>
      Одним из простых, наиболее прямолинейных способов создать с нуля
      вебприложение на языке Python является использование стандарта
      Common Gateway Interface (CGI), который был популярен, начиная с
      1998 года. Кратко рассмотрим как это работает: создаётся скрипт
      на языке Python, который выводит HTML, скрипт сохраняется на веб
      сервере в файле с расширением <filename>.cgi</filename>, затем к
      скрипту можно обращаться через веб браузер. Вот и всё.
    </para>

    <para>
      Ниже приведён простой CGI скрипт, написанный на языке Python,
      который отображает десять наиболее свежих книг из базы
      данных. Не беспокойтесь о деталях, просто рассмотрите как он
      работает:
      <screen>
	    <![CDATA[
#!/usr/bin/env python

import MySQLdb

print "Content-Type: text/html"
print
print "<html><head><title>Книги</title></head>"
print "<body>"
print "<h1>Книги</h1>"
print "<ul>"

connection = MySQLdb.connect(user='me', passwd='letmein', db='my_db')
cursor = connection.cursor()
cursor.execute("SELECT name FROM books ORDER BY pub_date DESC LIMIT 10")
for row in cursor.fetchall():
    print "<li>%s</li>" % row[0]

print "</ul>"
print "</body></html>"

connection.close()
	    ]]>
      </screen>
    </para>

    <para>
      Во-первых, согласно требованиям CGI, код выводит строку
      <quote>Content-Type</quote>, затем пустую строку.  Скрипт
      выводит необходимые HTML теги, подключается к базе данных и
      выполняет запрос для получения имён последних десяти
      книг. Обрабатывая результат запроса, скрипт создаёт
      ненумерованный список имён. Наконец, скрипт закрывает HTML теги
      и закрывает соединение с базой данных.
    </para>

    <para>
      Для одиночной динамической страницы, подобной этой, методика
      <quote>написать всё с нуля</quote> не всегда плоха. Во-первых,
      этот код прост для понимания даже неопытным разработчиком и его
      легко установить на <quote>боевую</quote><footnote><para>Здесь и
      далее этот термин подразумевает production (FIXME)
      WEB-сервер.</para></footnote> систему &mdash; просто сохранить в
      файл с расширением <filename>.cgi</filename> и зайди браузером.
    </para>

    <para>
      Но несмотря на свою простоту, данный подход имеет ряд проблем и
      недостатков. Задайте себе эти вопросы:
      <itemizedlist>
	<listitem>
	  <para>
	    Что произойдёт, если потребуется обеспечить работу
	    множества компонентов вашего приложения с базой данных?
	    Несомненно, что код для подключения к базе не должен быть
	    скопирован в каждый отдельный CGI скрипт. Придётся вынести
	    этот код в общую библиотеку функций.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Действительно ли разработчик должен беспокоиться о выводе
	    строки <quote>Content-Type</quote> и помнить о
	    необходимости закрывать соединение с базой данных? Такие
	    вещи снижают производительность разработчика и увеличивают
	    вероятность появления ошибок в коде. Такими задачами
	    должна заниматься некая общая инфраструктура.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Что произойдёт, если этот код будет использоваться во
	    множестве сред, каждая со своей базой данных и логином? В
	    этом случае потребуется вводить некоторую конфигурацию,
	    специфичную для среды исполнения.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Что произойдёт, если дизайнер, который не имеет опыта
	    разработки на языке Python, пожелает поменять вид
	    страницы? Один неверный символ может уронить целое
	    приложение. В идеале, при отображении страницы, логика
	    страницы &mdash; получение названий книг из базы данных
	    &mdash; должна быть отделена от вывода HTML. В этом случае
	    дизайнер может вносить необходимые изменения в HTML без
	    влияния на всё остальное.
	  </para>
	</listitem>
      </itemizedlist>
    </para>

    <para>
      Предназначение среды разработки как раз в том, чтобы решать
      подобные задачи. Среда предоставляет инфраструктуру разработки
      для ваших приложений, вы же концентрируетесь на создании явного,
      хорошо поддерживаемого кода, без необходимости каждый раз
      изобретать колесо. Вкратце, этим и занимается Django.
    </para>

  </section>

  <section id="&BASEID;.mvc">

    <title id="&BASEID;.mvc.title">
      Шаблон MVC разработки
    </title>

    <para>
      Давайте рассмотрим небольшой пример, который демонстрирует
      разницу между предыдущим подходом и тем, который предлагает
      среда разработки. Покажем как вы могли написать предыдущий CGI
      код, воспользовавшись возможностями Django. Мы разделим этот код
      на четыре файла:
    </para>

    <para>
      Файл <filename>models.py</filename> описывает таблицу базы
      данных.
      <screen>
	    <![CDATA[
from django.db import models

class Book(models.Model):
    name = models.CharField(max_length=50)
    pub_date = models.DateField()
	    ]]>
      </screen>
    </para>

    <para>
      Файл <filename>views.py</filename> описывает логику приложения.
      <screen>
	    <![CDATA[
from django.shortcuts import render_to_response
from models import Book

def latest_books(request):
    book_list = Book.objects.order_by('-pub_date')[:10]
    return render_to_response('latest_books.html', {'book_list': book_list})
	    ]]>
      </screen>
    </para>

    <para>
      Файл <filename>urls.py</filename> описывает соответствие URL
      логике приложения.
      <screen>
	    <![CDATA[
from django.conf.urls.defaults import *
import views

urlpatterns = patterns('',
    (r'^latest/$', views.latest_books),
)
	    ]]>
      </screen>
    </para>

    <para>
      Файл <filename>latest_books.html</filename> описывает HTML
      шаблон, используемый при выводе страницы.
      <screen>
	    <![CDATA[
<html><head><title>Книги</title></head>
<body>
<h1>Книги</h1>
<ul>
{% for book in book_list %}
<li>{{ book.name }}</li>
{% endfor %}
</ul>
</body></html>
        ]]>
      </screen>
    </para>

    <para>
      Не пытайтесь пока разобраться <emphasis>как</emphasis> это всё
      работает. Мы желаем лишь показать общую концепцию. Главной идеей
      в Django является <emphasis>разделение задач</emphasis>:
      <itemizedlist>
        <listitem>
          <para>
            Файл <filename>models.py</filename> содержит описание
            таблицы базы данных, представленное в виде класса
            Python. Такой класс называется
            <emphasis>моделью</emphasis>. С помощью данного класса вы
            можете создавать, получать, обновлять и удалять записи в
            таблице вашей базы данных, используя простой код на языке
            Python вместо использования повторяющихся SQL команд.
          </para>
        </listitem>

        <listitem>
          <para>
            Файл <filename>views.py</filename> содержит логику
            отображения страницы в функции
            <function>latest_books()</function>. Такая функция
            называется <emphasis>представлением</emphasis>.
          </para>
        </listitem>

        <listitem>
          <para>
            Файл <filename>urls.py</filename> определяет какое именно
            представление будет вызвано для URL, заданного в виде
            шаблона. В данном случае URL <token>/latest/</token> будет
            обработано функцией
            <function>latest_books()</function>. Другими словами, если
            имя вашего домена <token>example.com</token>, то любой
            доступ к <ulink url="http://example.com/latest/"/> будет
            обработан функцией <function>latest_books()</function>.
          </para>
        </listitem>

        <listitem>
          <para>
            Файл <filename>latest_books.html</filename> является HTML
            шаблоном, который описывает дизайн страницы. Он использует
            шаблонный язык с основными логическими операторами &mdash;
            <token>{% for book in book_list %}</token>.
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
      Объединённые вместе, эти компоненты приложения следуют шаблону
      <ulink url="http://ru.wikipedia.org/wiki/MVC/">Модель-Представление-Контроллёр</ulink>
      (<emphasis>Model-View-Controller</emphasis>, MVC). Примем, что
      MVC определяет способ разработки программного обеспечения при
      котором код для определения и доступа к данным (модель) отделён
      от логики приложения (управление), которая в свою очередь
      отделена от интерфейса пользователя (представление).
    </para>

    <para>
      Основное преимущество такого подхода заключается в свободе
      объединения этих компонентов. Следовательно, каждая отдельная
      часть приложения, созданного с помощью Django, имеет одно
      назначение и может быть изменена независимо, т.е., без влияния на
      остальные компоненты. Например, разработчик может изменить URL
      для данной части приложения без изменения остального
      кода. Дизайнер может изменить HTML страницы без внесения
      изменений в код, который отображает страницу. Администратор базы
      данных может переименовать таблицу и определить эти изменения в
      одном месте, вместо того, чтобы искать и вносить изменения во
      множество файлов.
    </para>

    <para>
      В данной книге каждый компонент MVC описан в своей собственной
      главе.
    </para>

  </section>

  <section id="&BASEID;.history">

    <title id="&BASEID;.history.title">
      История Django
    </title>

    <para>
      Прежде чем мы погрузимся в изучение кода, следует уделить
      немного времени истории развития Django. Мы отметили, что мы
      будем рассказывать вам как всё работает <emphasis>без</emphasis>
      вспомогательных средств, чтобы помочь вам разобраться с
      внутренней кухней процессов. Аналогично, будет полезно для
      понимания того, <emphasis>почему</emphasis> была создана среда
      Django, почему Django работает именно так, а не иначе.
    </para>

    <para>
      Если у вас есть достаточный опыт разработки приложений, возможно
      вы сталкивались с проблемами, показанными на примере CGI,
      который мы продемонстрировали ранее. Классический процесс
      разработки приложения выглядит так:
      <orderedlist>
        <listitem>
          <para>
            Создать приложение с нуля.
          </para>
        </listitem>

        <listitem>
          <para>
            Создать другое приложение с нуля.
          </para>
        </listitem>

        <listitem>
          <para>
            Реализовать работу первого приложения со вторым.
          </para>
        </listitem>

        <listitem>
          <para>
            Переработать код так, чтобы оба приложения использовали
            общие функции.
          </para>
        </listitem>

        <listitem>
          <para>
            Повторить шаги 2-4 несколько раз.
          </para>
        </listitem>

        <listitem>
          <para>
            Вы изобрели среду разработки.
          </para>
        </listitem>
      </orderedlist>
    </para>

    <para>
      Именно так и была создана Django!
    </para>

    <para>
      Django органично росла во время разработки реальных приложений,
      созданных командой разработки в Лоуренсе, штат Канзас, США. Она
      родилась в конце 2003 когда программисты газеты <quote>Lawrence
      Journal-World</quote>, Эдриан Холовати (Adrian Holovaty) и Симон
      Виллисон (Simon Willison), начали использовать язык Python для
      разработки своих приложений. Команда World Online, ответственная
      за разработку и поддержку нескольких локальных новостных сайтов,
      процветала в среде разработчиков, диктуемой срочностью работы
      журналиста. Для сайтов, включая LJWorld.com, Lawrence.com и
      KUsports.com, журналисты и менеджеры требовали, чтобы новые
      возможности и целые приложения были разработаны максимально
      быстро, часто счёт шёл на дни или на часы. Таким образом, Симон
      и Эдриан создали среду разработки экономящую время, исходя из
      своих потребностей &mdash; это был единственный способ, с
      помощью которого они могли создавать управляемые приложения в
      жёстких рамках сроков.
    </para>

    <para>
      <note>
        <para>
          Рекомендуем ознакомиться с:

          <itemizedlist>
            <listitem>
              <para>
                <ulink
                url="http://www.python.org/dev/peps/pep-0008/">Руководство
                по стилю кода на языке Python</ulink>.
              </para>
            </listitem>

            <listitem>
              <para>
                <ulink
                url="http://docs.python.org/tutorial/index.html">Туториал</ulink>.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </note>
    </para>

    <para>
      Летом 2005, развив эту среду до такого состояния, что она
      поддерживала большинство сайтов World Online, команда
      разработчиков, включая Якоба Каплан-Мосса (Jacob Kaplan-Moss),
      решила выпустить среду в виде программного обеспечения с
      открытым исходным кодом. Они выпустили его в июле 2005 под
      именем Django в честь джазового гитариста Джанго Рэйнхарда
      (Django Reinhardt).
    </para>

    <para>
      Теперь, по прошествии нескольких лет, Django является грамотным
      проектом с открытым исходным кодом с десятками тысяч
      пользователей, над которым работают разработчики по всей
      планете. Два автора из команды World Online (<quote>Великодушные
      пожизненные диктаторы</quote>, Эдриан и Якоб) всё ещё осуществляют
      общее руководство над развитием среды разработки, но теперь оно
      в большей степени зависит совместных усилий команды разработчиков.
      World Online обеспечивает другие важные аспекты, такие как время
      разработчиков, маркетинговые материалы и хостинг/канал для сайта среды
      (<ulink url="http://www.djangoproject.com/"/>).
    </para>

    <para>
      Эта история уместна, потому что помогает объяснить два ключевых
      аспекта. Первый аспект &mdash; основное назначение Django. Так
      как Django родился в новостной среде, он предоставляет некоторые
      средства (такие как административный интерфейс, описанные в
      главе <quote><xref linkend="djangobook.chap06"
      endterm="djangobook.chap06.title"/></quote>), которые хорошо
      подойдут для контент-ориентированных сайтов, таких как
      Amazon.com, craigslist.org и washingtonpost.com, которые
      предоставляют динамическую информацию из базы данных. Существует
      разница между быть <emphasis>особенно эффективным</emphasis> в
      чём-то и быть <emphasis>неэффективным</emphasis> в другом.
    </para>

    <para>
      Вторым аспектом является то, как происхождение Django
      сформировало культуру его сообщества открытого исходного
      кода. Так как Django был получен из реального кода, а не был
      академической разработкой или коммерческим продуктом, он
      полностью сфокусирован на решение проблем разработки, с которыми
      сталкивались и продолжают сталкиваться его авторы. В результате,
      Django постоянно совершенствуется. Основатели среды имеют свой
      интерес в том, чтобы Django экономил их время, создавал
      приложения лёгкие в обслуживании и хорошо работал под
      нагрузкой. При отсутствии других причин, разработчики
      мотивируются своими собственными эгоистичными желаниями
      сэкономить своё время и наслаждаться своей работой.
    </para>

  </section>

  <section id="&BASEID;.howtoread">

    <title id="&BASEID;.howtoread.title">
      Как читать эту книгу
    </title>

    <para>
      При создании этой книги мы старались соблюсти баланс между
      возможностью читать и возможностью пользоваться ей как
      справочником, с уклоном в сторону чтения. Нашей целью является,
      как было сказано ранее, сделать из вас эксперта по Django и мы
      верим, что лучшим способом для этого будет изучение примеров,
      вместо чтения сухого описания возможностей среды
      разработки. Кто-то однажды сказал, вы не сможете научить
      кого-нибудь говорить, обучая его алфавиту.
    </para>

    <para>
      Учитывая это, мы рекомендуем прочитать следующие семь глав по
      порядку. Они формируют основу использования Django, после их
      прочтения вы будете способны создавать сайты с помощью среды
      разработки. Остальные главы, которые сфокусированы на особенных
      возможностях Django, можно читать в любом порядке.
    </para>

    <para>
      Приложения даны в качестве справочника. Они, вместе со свободной
      документацией на <ulink url="http://www.djangoproject.com/"/>,
      являются тем, что вы будете периодически просматривать при
      разработке.
    </para>

    <section id="&BASEID;.howtoread.develknowledge">

      <title id="&BASEID;.howtoread.develknowledge.title">
        Необходимые знания в программировании
      </title>

      <para>
        Читатели должны понимать основы процедурного и
        объекто-ориентированного программирования: управляющие
        структуры (<token>if</token>, <token>while</token>,
        <token>for</token>), структуры данных (списки, хэши/словари),
        переменные, классы и объекты.
      </para>

      <para>
        Опыт разработки будет, как вы можете ожидать, очень полезным,
        но не обязательным для понимания этой книги. По всей книге мы
        пытаемся рекламировать лучшие подходы в программировании для
        читателей у которых нет опыта в этой области.
      </para>

    </section>

    <section id="&BASEID;.howtoread.pythonknowledge">

      <title id="&BASEID;.howtoread.pythonknowledge.title">
        Необходимые знания языка Python
      </title>

      <para>
        Если рассматривать ядро среды, Django является просто набором
        библиотек, написанных на языке Python. При разработке сайта с
        помощью Django вам придётся писать код на языке Python,
        который использует эти библиотеки. Изучая Django важно
        понимать как программировать на языке Python и понимать как
        работают библиотеки Django.
      </para>

      <para>
        Если у вас есть опыт разработки на языке Python, вы не должны
        будете испытывать проблемы. Более того, код Django не делает
        чего-то магического (т.е. с помощью хитрых приёмов
        программирования, которые трудно объяснить или понять). Для
        вас изучение Django будет означать изучение соглашений и API
        среды разработки.
      </para>

      <para>
        Если у вас нет опыта разработки на языке Python, ничего
        страшного. Его легко изучить и прикольно использовать!
        Несмотря на то, что эта книга не включает в себя обучение
        языку Python, она подчёркивает возможности языка и его
        функциональность. Мы рекомендуем прочитать официальные
        документы по языку на <ulink
        url="http://docs.python.org/tut/"/>. Мы также рекомендуем
        прочитать книгу Марка Пилгрима <ulink
        url="http://ru.diveintopython.org/toc.html">Вглубь языка
        Python</ulink>, опубликованную издательством Apress и
        переведённую Денисом Откидач.
      </para>

    </section>

    <section id="&BASEID;.howtoread.djangoversion">

      <title id="&BASEID;.howtoread.djangoversion.title">
        Требуемая версия Django
      </title>

      <para>
        Данная книга описывает серию релизов 1.х, т.е. версии 1.0,
        1.0.2 или 1.1.
      </para>

      <para>
        Разработчики Django обеспечивают обратную совместимость с
        основными версиями. Это означает, что если вы пишете
        приложение для Django 1.0, оно будет работать с версиями 1.1,
        1.2, 1.9 и со всеми другими версиями, которые начинаются с
        <quote>1</quote>.
      </para>

      <para>
        Когда Django достигнет версии 2.0, может потребоваться
        переписать ваше приложение &mdash; но до этого ещё
        далеко. Например, путь до версии 1.0 занял три года. (Это
        очень похоже на политику совместимости принятую для языка
        Python &mdash; код, написанный для Python 2.0, работает в 2.6,
        но это не гарантируется для Python 3.0).
      </para>

      <para>
        Принимая описанное, данная книга охватывается все версии
        Django 1.x и должна прослужить вам приличное время.
      </para>

    </section>

    <section id="&BASEID;.howtoread.gettinghelp">

      <title id="&BASEID;.howtoread.gettinghelp.title">
        Получение помощи
      </title>

      <para>
        Одним из главных достоинств Django является его доброе и
        полезное сообщество пользователей. Не стесняйтесь задавать
        вопрос по любому аспекту работы с Django: инсталляция, дизайн
        приложения, дизайн базы данных, установка на боевой сервер.
        <itemizedlist>
          <listitem>
            <para>
              Список рассылки <token>django-users</token> является
              местом где тысячи пользователей задают и отвечают на
              вопросы. Зарегистрируйтесь свободно на <ulink
              url="http://www.djangoproject.com/r/django-users"/>.
            </para>
          </listitem>

          <listitem>
            <para>
              IRC канал является местом где пользователи могут
              общаться друг с другом, помогая в реальном
              времени. Присоединяйтесь к каналу <token>#django</token>
              в FreeNode IRC.
            </para>
          </listitem>
        </itemizedlist>
      </para>

    </section>

  </section>

  <section id="&BASEID;.coding-style">

    <title id="&BASEID;.coding-style.title">
      Стиль исходного кода
    </title>

    <para>
      Перевод оригинальной статьи на <ulink
      url="http://www.djangoproject.com/documentation/contributing/#coding-style"/>.
    </para>

    <para>
      Пожалуйста, следуйте следующим правилам при разработке своих
      приложений:
      <itemizedlist>
        <listitem>
          <para>
            Если особо не оговорено иное, надо использовать стандарт
            <ulink url="http://www.python.org/peps/pep-0008.html">PEP
            8</ulink>.
          </para>

          <para>
            Можно использовать утилиту аналогичную <ulink
            url="http://svn.browsershots.org/trunk/devtools/pep8/pep8.py">pep8.py</ulink>
            для проверки исходного кода.
          </para>
        </listitem>

        <listitem>
          <para>
            Для отступа следует использовать четыре пробела.
          </para>
        </listitem>

        <listitem>
          <para>
            Пользуйтесь символами подчёркивания (<token>_</token>), а
            не выделениемРегистра при указании имён переменных,
            функций и методов (т.е.,
            <token>poll.get_unique_voters()</token>, а не
            <token>poll.getUniqueVoters()</token>).
          </para>
        </listitem>

        <listitem>
          <para>
            Используйте заглавные буквы в определении класса или
            функций, которые возвращают классы (например,
            <token>InitialCaps</token>).
          </para>
        </listitem>

        <listitem>
          <para>
            Подготовьте все строки к переводу. За дополнительной
            информацией обратитесь к главе <quote><xref
            linkend="djangobook.chap18"
            endterm="djangobook.chap18.title"/></quote>.
          </para>
        </listitem>

        <listitem>
          <para>
            В строках документации используйте <quote>активные
            слова</quote>, например:
            <screen>
              <![CDATA[
def foo():
    """
    Calculates something and returns the result.
    """
    pass
              ]]>
            </screen>
            а не:
            <screen>
              <![CDATA[
def foo():
    """
    Calculate something and return the result.
    """
    pass
              ]]>
            </screen>
          </para>
        </listitem>

        <listitem>
          <para>
            Не указывайте своё имя в коде. Политика Django
            предусматривает хранение имён авторов кода в файле
            AUTHORS.
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <section id="&BASEID;.coding-style.templates">

      <title id="&BASEID;.coding-style.templates.title">
        Шаблоны
      </title>

      <para>
        <itemizedlist>
          <listitem>
            <para>
              В шаблонах используйте только один пробел между
              фигурными скобками и содержимым тега.
            </para>

            <para>
              Делайте так:
              <screen>
                <![CDATA[
{{ foo }}
                ]]>
              </screen>
              а не так:
              <screen>
                <![CDATA[
{{foo}}
                ]]>
              </screen>
            </para>
          </listitem>
        </itemizedlist>
      </para>

    </section>

    <section id="&BASEID;.coding-style.views">

      <title id="&BASEID;.coding-style.views.title">
        Представления
      </title>

      <para>
        <itemizedlist>
          <listitem>
            <para>
              В представлениях первым параметром всегда должен быть
              <token>request</token>.
            </para>

            <para>
              Делайте так:
              <screen>
                <![CDATA[
def my_view(request, foo):
    # ...
                ]]>
              </screen>
              а не так:
              <screen>
                <![CDATA[
def my_view(req, foo):
    # ...
                ]]>
              </screen>
            </para>
          </listitem>
        </itemizedlist>
      </para>

    </section>

    <section id="&BASEID;.coding-style.models">

      <title id="&BASEID;.coding-style.models.title">
        Модели
      </title>

      <para>
        <itemizedlist>
          <listitem>
            <para>
              Имена полей должны определяться в нижнем регистре с
              использованием символа подчёркивания.
            </para>

            <para>
              Делайте так:
              <screen>
                <![CDATA[
class Person(models.Model):
    first_name = models.CharField(max_length=20)
    last_name = models.CharField(max_length=40)
                ]]>
              </screen>
              а не так:
              <screen>
                <![CDATA[
class Person(models.Model):
    FirstName = models.CharField(max_length=20)
    Last_Name = models.CharField(max_length=40)
                ]]>
              </screen>
            </para>
          </listitem>

          <listitem>
            <para>
              Класс <classname>Meta</classname> должен описываться
              <emphasis>после</emphasis> определения полей, отделённый
              от них пустой строкой.
            </para>

            <para>
              Делайте так:
              <screen>
                <![CDATA[
class Person(models.Model):
    first_name = models.CharField(max_length=20)
    last_name = models.CharField(max_length=40)

    class Meta:
        verbose_name_plural = 'people'
                ]]>
              </screen>
              а не так:
              <screen>
                <![CDATA[
class Person(models.Model):
    first_name = models.CharField(max_length=20)
    last_name = models.CharField(max_length=40)
    class Meta:
        verbose_name_plural = 'people'
                ]]>
              </screen>
              и не так:
              <screen>
                <![CDATA[
class Person(models.Model):
    class Meta:
        verbose_name_plural = 'people'

    first_name = models.CharField(max_length=20)
    last_name = models.CharField(max_length=40)
                ]]>
              </screen>
            </para>
          </listitem>

          <listitem>
            <para>
              Порядок внутренних классов модели и стандартных методов
              должен быть таким (ничто из нижеперечисленного не
              является обязательным):
              <itemizedlist>
                <listitem>
                  <para>
                    Определение всех полей класса.
                  </para>
                </listitem>

                <listitem>
                  <para>
                    <token>class Meta</token>.
                  </para>
                </listitem>

                <listitem>
                  <para>
                    <token>class Admin</token>.
                  </para>
                </listitem>

                <listitem>
                  <para>
                    <token>def __unicode__()</token>.
                  </para>
                </listitem>

                <listitem>
                  <para>
                    <token>def __str__()</token>.
                  </para>
                </listitem>

                <listitem>
                  <para>
                    <token>def save()</token>.
                  </para>
                </listitem>

                <listitem>
                  <para>
                    <token>def get_absolute_url()</token>.
                  </para>
                </listitem>

                <listitem>
                  <para>
                    Любые свои методы.
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>

          <listitem>
            <para>
              Если для модели определена опция <token>choices</token>,
              определите выбор в виде кортежа кортежей, использовав
              заглавные буквы для его имени. Определение лучше
              помещать в начале файла с моделями или перед
              классом. Пример:
              <screen>
                <![CDATA[
GENDER_CHOICES = (
    ('M', 'Male'),
    ('F', 'Female'),
)
                ]]>
              </screen>
            </para>
          </listitem>
        </itemizedlist>
      </para>

    </section>

  </section>

</chapter>
