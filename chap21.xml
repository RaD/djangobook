<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
[
<!ENTITY BASEID "djangobook.chap21">
]>

<chapter lang="ru" id="&BASEID;">

  <title id="&BASEID;.title">
    Обновление Django проектов при смене версии
  </title>

  <para>
    Перевод &copy; Попов Руслан &lt;radz &bull; yandex &bull; ru&gt;
  </para>

  <para>
    Django 1.0 несовместима в некоторых вопросах с Django 0.96.
  </para>

  <para>
    Данная глава поможет вам спортировать проекты и приложения с
    версии 0.96 на 1.0. Первая часть главы описывает общие требования,
    которые необходимо выполнить для запуска проектов на версии
    1.0. Если после выполнения этих требованием у вас есть проблемы с
    выполнением кода, обратитесь к разделу <quote><xref
    linkend="&BASEID;.less-common-changes"
    endterm="&BASEID;.less-common-changes.title"/></quote> для получения
    списка незначительных изменений.

    <note>
      <title>
	Изучите также...
      </title>

      <para>
	Комментарий к версии 1.0. FIXME LINK. Этот документ гораздо
	подробнее описывает новые возможности выпущенной версии:
	руководство по портированию в основном сосредоточено на том,
	чтобы помочь вам быстро восстановить работоспособность вашего
	кода.
      </para>
    </note>
  </para>

  <section id="&BASEID;.common-changes">

    <title id="&BASEID;.common-changes.title">
      Основные изменения
    </title>

    <para>
      Данный раздел описывает различия между версиями 0.96 и 1.0,
      которые потребуется учесть большинству пользователей.
    </para>

    <section id="&BASEID;.common-changes.use-unicode">

      <title id="&BASEID;.common-changes.use-unicode.title">
	Используйте Unicode
      </title>
      
      <para>
	Измените свои строки (<token>'foo'</token>) на использование
	Unicode (<token>u'foo'</token>). Django теперь везде
	использует строки в формате Unicode. В большинстве случаев,
	простые строки будут продолжать нормально работать, но перевод
	их в Unicode-форму предотвратит возможные проблемы в будущем.
      </para>

    </section>
	
    <section id="&BASEID;.common-changes.models">

      <title id="&BASEID;.common-changes.models.title">
	Модели
      </title>
      
      <para>
	Основные изменения, которые придётся сделать в файлах с
	описанием моделей:
	<itemizedlist>
	  <listitem>
	    <para>
	      Переименовать <token>maxlength</token> в
	      <token>max_length</token>.
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      Заменить функцию <token>__str__</token> на
	      метод<token>__unicode__</token>. Удостоверьтесь, что вы
	      используете Unicode в этом методе.
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      Удалите аргумент <token>prepopulated_from</token> из
	      описания поля. Оно больше не поддерживается здесь и
	      перемещено в класс <classname>AdminModel</classname> в
	      файл <filename>admin.py</filename>.
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      Используйте вместо <token>class Admin</token> на
	      определения в файле
	      <filename>admin.py</filename>. Уберите во всех моделях
	      класс <classname>Admin</classname>. Если вы забудете
	      сделать это, то ничего не сломается, но и делать ничего
	      полезного эти классы не будут. Для того, чтобы
	      зарегистрировать приложения в административном
	      интерфейсе вам потребуется описать соответствующие
	      модели в файле <filename>admin.py</filename>.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>

      <para>
	Ниже приведён файл <filename>models.py</filename> и описаны
	все необходимые действия для приведения его к виду, который
	нужен для нормальной работы в Django 1.0.
      </para>

      <para>
	Старая версия (0.96) <filename>models.py</filename>:
	<screen>
	  <![CDATA[
class Author(models.Model):
    first_name = models.CharField(maxlength=30)
    last_name = models.CharField(maxlength=30)
    slug = models.CharField(maxlength=60, prepopulate_from=('first_name', 'last_name'))

    class Admin:
        list_display = ['first_name', 'last_name']

    def __str__(self):
        return '%s %s' % (self.first_name, self.last_name)
	  ]]>
	</screen>
      </para>

      <para>
	Новая версия (1.0) <filename>models.py</filename>:
	<screen>
	  <![CDATA[
class Author(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    slug = models.CharField(max_length=60)

    def __unicode__(self):
        return u'%s %s' % (self.first_name, self.last_name)
	  ]]>
	</screen>
      </para>

      <para>
	Новая версия (1.0) <filename>admin.py</filename>:
	<screen>
	  <![CDATA[
from django.contrib import admin
from models import Author

class AuthorAdmin(admin.ModelAdmin):
    list_display = ['first_name', 'last_name']
    prepopulated_fields = {
        'slug': ('first_name', 'last_name')
    }

admin.site.register(Author, AuthorAdmin)
	  ]]>
	</screen>
      </para>

    </section>

    <section id="&BASEID;.common-changes.admin">

      <title id="&BASEID;.common-changes.admin.title">
	Интерфейс администратора
      </title>
      
      <para>
	Одним из знчительных нововведения Django 1.0 является новый
	интерфейс администратора
	(<token>django.contrib.admin</token>). Он был полностью
	переработан. Определения интерфейса теперь полностью отделены
	от определений моделей. Интерфейс был переписан с
	использованием новой библиотеки для работы с формами и был
	изменён его дизайн с учётом возможностей по расширению его
	функциональности и настройки.
      </para>

      <para>
	На практике это означает, что вам потребуется переписать все
	определения класса <classname>Admin</classname>. Выше было
	показано, что надо изменить ваш <token>class Admin</token> на
	вызов метода <function>admin.site.register()</function> в
	файле <filename>admin.py</filename>. Далее мы уточним
	некоторые детали этого процесса.

	<note>
	  <title>
	    Это надо знать...
	  </title>

	  <para>
	    Разработчик с сайта <ulink
	    url="http://www.djangosnippets.org/">djangosnippets</ulink>
	    выложил скрипт, который <ulink
	    url="http://www.djangosnippets.org/snippets/603/">сканирует
	    все ваши файлы <filename>models.py</filename> и создаёт
	    соответствующий файл
	    <filename>admin.py</filename></ulink>.
	  </para>
	</note>
      </para>

      <section id="&BASEID;.common-changes.admin.new-inline-syntax">

	<title id="&BASEID;.common-changes.admin.new-inline-syntax.title">
	  Новый синтаксис
	</title>
      
	<para>
	  Новая опция <token>edit_inline</token> была перемещена в
	  файл <filename>admin.py</filename>. Пример:
	</para>

	<para>
	  Старая версия (0.96):
	  <screen>
	    <![CDATA[
class Parent(models.Model):
    ...

class Child(models.Model):
    parent = models.ForeignKey(Parent, 
                               edit_inline=models.STACKED, 
			       num_in_admin=3)
	    ]]>
	  </screen>
	</para>

	<para>
	  Новая версия (1.0):
	  <screen>
	    <![CDATA[
class ChildInline(admin.StackedInline):
    model = Child
    extra = 3

class ParentAdmin(models.ModelAdmin):
    model = Parent
    inlines = [ChildInline]

admin.site.register(Parent, ParentAdmin)
	    ]]>
	  </screen>
	</para>

      </section>

      <section id="&BASEID;.common-changes.admin.simplify-fields">

	<title id="&BASEID;.common-changes.admin.simplify-fields.title">
	  Упрощайте fields или используйте fieldsets
	</title>
      
	<para>
	  Старый синтаксис <token>fields</token> был запутанным и его
	  упростили. Старый синтаксис всё ещё поддерживается, но в
	  скором времени вам потребуется использовать
	  <token>fieldsets</token>.
	</para>

	<para>
	  Старая версия (0.96):
	  <screen>
	    <![CDATA[
class ModelOne(models.Model):
    ...

    class Admin:
        fields = (
            (None, {'fields': ('foo','bar')}),
        )

class ModelTwo(models.Model):
    ...

    class Admin:
        fields = (
            ('group1', {'fields': ('foo','bar'),   'classes': 'collapse'}),
            ('group2', {'fields': ('spam','eggs'), 'classes': 'collapse wide'}),
        )
	    ]]>
	  </screen>
	</para>

	<para>
	  Новая версия (1.0):
	  <screen>
	    <![CDATA[
class ModelOneAdmin(admin.ModelAdmin):
    fields = ('foo', 'bar')

class ModelTwoAdmin(admin.ModelAdmin):
    fieldsets = (
        ('group1', {'fields': ('foo','bar'),   'classes': 'collapse'}),
        ('group2', {'fields': ('spam','eggs'), 'classes': 'collapse wide'}),
    )
	    ]]>
	  </screen>
	</para>

      </section>

    </section>

    <section id="&BASEID;.common-changes.urls">

      <title id="&BASEID;.common-changes.urls.title">
	Схема URL
      </title>
      
      <para>
	Если вы используете интерфейс администратора, то вам
	потребуется внести изменения в ваш корневой
	<filename>urls.py</filename>.
      </para>

      <para>
	Старая версия (0.96) <filename>urls.py</filename>:
	<screen>
	  <![CDATA[
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    (r'^admin/', include('django.contrib.admin.urls')),

    # ... the rest of your URLs here ...
)
	  ]]>
	</screen>
      </para>

      <para>
	Новая версия (1.0) <filename>urls.py</filename>:
	<screen>
	  <![CDATA[
from django.conf.urls.defaults import *

# The next two lines enable the admin and load each admin.py file:
from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
    (r'^admin/(.*)', admin.site.root),

    # ... the rest of your URLs here ...
)
	  ]]>
	</screen>
      </para>

    </section>

    <section id="&BASEID;.common-changes.views">

      <title id="&BASEID;.common-changes.views.title">
	Представления
      </title>
      
      <section id="&BASEID;.common-changes.views.forms">

	<title id="&BASEID;.common-changes.views.forms.title">
	  Новая библиотека для работы с формами
	</title>
	
	<para>
	  Замените <token>django.newforms</token> на использование
	  <token>django.forms</token> &mdash; разработчики Django
	  переименовали эту библиотеку. Старая библиотека
	  <token>oldforms</token> была удалена из Django.
	</para>

	<para>
	  Если вы уже использовали <token>newforms</token>, то всё,
	  что вам потребуется сделать &mdash; изменить оператор
	  импорта для этой библиотеки:
	  <screen>
	    <![CDATA[
# было
from django import newforms as forms

# стало
from django import forms
	    ]]>
	  </screen>
	</para>

	<para>
	  Если вы использовали библиотеку <token>oldforms</token>, то
	  вам потребуется внести значительные изменения в ваше
	  приложение.
	</para>

      </section>

      <section id="&BASEID;.common-changes.views.uploading">

	<title id="&BASEID;.common-changes.views.uploading.title">
	  Обработка загружаемых файлов
	</title>
	
	<para>
	  Раньше обработка загружаемых файлов велась через
	  <token>request.FILES></token>, теперь же следует работать с
	  классом <classname>UploadedFile</classname> как со
	  словарём. Старый синтаксис больше не поддерживается.
	</para>

	<para>
	  Таким образом, для представления такого вида:
	  <screen>
	    <![CDATA[
def my_view(request):
    f = request.FILES['file_field_name']
    ...
	    ]]>
	  </screen>
	  вам потребуется сделать следующие изменения:

	  <table id="&BASEID;.tbl1" frame="all" pgwide="1">

	    <title id="&BASEID;.tbl1.title">
	      Изменения в обработке загруженных файлов
	    </title>
	    
	    <tgroup cols="2" align="left" colsep="1" rowsep="1">
	      
	      <colspec colname="c1" colwidth="7.5cm"/>
	      <colspec colname="c2" colwidth="7.5cm"/>
	      
	      <thead>
		<row>
		  <entry>Старый подход (0.96)</entry>
		  <entry>Новый подход (1.0)</entry>
		</row>
	      </thead>
	      
	      <tbody>
		<row>
		  <entry><token>f['content']</token></entry>
		  <entry><token>f.read()</token></entry>
		</row>
		
		<row>
		  <entry><token>f['filename']</token></entry>
		  <entry><token>f.name</token></entry>
		</row>
		
		<row>
		  <entry><token>f['content-type']</token></entry>
		  <entry><token>f.content_type</token></entry>
		</row>
	      </tbody>
	    </tgroup>
	  </table>
	</para>

      </section>

    </section>

    <section id="&BASEID;.common-changes.templates">

      <title id="&BASEID;.common-changes.templates.title">
	Шаблоны
      </title>

      <para>
	Научитесь использовать автоэкранирование. Теперь, по
	умолчанию, шаблонная система автоматически экранирует каждую
	выводимую переменную.
      </para>

      <para>
	Для отключения автоматического экранирования отдельной
	переменной следует использовать фильтр <token>safe</token>:
	<screen>
	  <![CDATA[
Эта переменная будет экранирована: {{ data }}
Эта переменная не будет экранирована: {{ data|safe }}
	  ]]>
	</screen>
      </para>

      <para>
	Для отключения автоматического экранирования для всего шаблона
	следует обернуть шаблон или отдельную его часть тэгом
	<token>autoescape</token>:
	<screen>
	  <![CDATA[
{% autoescape off %}
   ... здесь будет неэкранированная информация ...
{% endautoescape %}
	  ]]>
	</screen>
      </para>

    </section>

  </section>

  <section id="&BASEID;.less-common-changes">

    <title id="&BASEID;.less-common-changes.title">
      Отдельные изменения
    </title>

    <para>
      Изменения, описанные в этом разделе, имеют небольшой, более
      ограниченный характер. Они больше повлияют на опытных
      пользователей, но возможно о них стоит почитать и проверить свой
      код, не используются ли они в нём.
    </para>

    <section id="&BASEID;.less-common-changes.signals">

      <title id="&BASEID;.less-common-changes.signals.title">
	Сигналы
      </title>

      <para>
	<itemizedlist>
	  <listitem>
	    <para>
	      Добавьте <token>**kwargs</token> ко всем
	      зарегистрированным обработчикам сигналов.
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      Осуществляйте подключение, отключение и отправку
	      сигналов через методы объекта
	      <classname>Signal</classname>, вместо прямого
	      использования методов
	      <token>django.dispatch.dispatcher</token>.
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      Удалите все упоминания об опциях
	      <token>Anonymous</token> и <token>Any</token> объекта
	      <classname>sender</classname>, их больше не
	      существует. Вы ещё можете получать сигналы, переданные
	      любым объектом <classname>sender</classname> с помощью
	      <token>sender=None</token>.
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      Преобразуйте все объявленные вами сигналы в экземпляры
	      <token>django.dispatch.Signal</token>, вместо
	      использования анонимных объектов.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>

      <para>
	Ниже приведены изменения, которые вам придётся сделать:

	<table id="&BASEID;.tbl2" frame="all" pgwide="1">

	  <title id="&BASEID;.tbl2.title">
	    Изменения в обработке загруженных файлов
	  </title>
	    
	  <tgroup cols="2" align="left" colsep="1" rowsep="1">
	    
	    <colspec colname="c1" colwidth="7.5cm"/>
	    <colspec colname="c2" colwidth="7.5cm"/>
	    
	    <thead>
	      <row>
		<entry>Старый подход (0.96)</entry>
		<entry>Новый подход (1.0)</entry>
	      </row>
	    </thead>
	    
	    <tbody>
	      <row>
		<entry><token>def callback(sender)</token></entry>
		<entry><token>def callback(sender, **kwargs)</token></entry>
	      </row>

	      <row>
		<entry><token>sig = object()</token></entry>
		<entry><token>sig = django.dispatch.Signal()</token></entry>
	      </row>

	      <row>
		<entry><token>dispatcher.connect(callback, sig)</token></entry>
		<entry><token>sig.connect(callback)</token></entry>
	      </row>

	      <row>
		<entry><token>dispatcher.send(sig, sender)</token></entry>
		<entry><token>sig.send(sender)</token></entry>
	      </row>

	      <row>
		<entry><token>dispatcher.connect(callback, sig, sender=Any)</token></entry>
		<entry><token>sig.connect(callback, sender=None)</token></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
      </para>

    </section>

    <section id="&BASEID;.less-common-changes.template-tags">

      <title id="&BASEID;.less-common-changes.template-tags.title">
	Шаблонные тэги
      </title>

      <para>
	Тэг <token>spaceless</token> удаляет <emphasis>все</emphasis>
	пробелы внутри HTML тэгов, оставляя там только один.
      </para>

    </section>

    <section id="&BASEID;.less-common-changes.localflavor">

      <title id="&BASEID;.less-common-changes.localflavor.title">
	Локальные особенности
      </title>

      <para>
	<token>django.contrib.localflavor.usa</token> был переименован
	в <token>django.contrib.localflavor.us</token> для того, чтобы
	он не выбивался среди остальных.
      </para>

    </section>

    <section id="&BASEID;.less-common-changes.sessions">

      <title id="&BASEID;.less-common-changes.sessions.title">
	Сессии
      </title>

      <para>
	Получение нового ключа
	сессии. <token>SessionBase.get_new_session_key()</token> был
	переименован в <token>_get_new_session_key()</token>. Метод
	<token>get_new_session_object()</token> больше не существует.
      </para>

    </section>

    <section id="&BASEID;.less-common-changes.fixtures">

      <title id="&BASEID;.less-common-changes.fixtures.title">
	Fixtures
      </title>

      <para>
	Loading a row no longer calls save(). Previously, loading a
	row automatically ran the model's save() method. This is no
	longer the case, so any fields (for example: timestamps) that
	were auto-populated by a save() now need explicit values in
	any fixture.
      </para>

    </section>

    <para>
      ЗАДОЛБАЛО
    </para>

  </section>

</chapter>
